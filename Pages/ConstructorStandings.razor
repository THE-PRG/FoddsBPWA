@page "/ConstructorStandings"
@using Newtonsoft.Json.Linq;
@using Microsoft.AspNetCore.Components.Rendering
@inject Blazored.LocalStorage.ILocalStorageService ls
@inject HttpClient Http

<h1>Classement Équipes</h1>

<p>Classement actuel des Équipes</p>

@if (constructorStandingsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Position</th>
                    <th>Points</th>
                    <th>Équipe</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var constructorStanding in constructorStandingsList)
                {
                    <tr>
                        <td>@constructorStanding.placement</td>
                        <td>@constructorStanding.points</td>
                        <td>@constructorStanding.teamName</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<ConstructorStanding> constructorStandingsList = new List<ConstructorStanding>();

    protected override async Task OnInitializedAsync()
    {
        string sJSON = "";
        
        try
        {
            sJSON = await Http.GetStringAsync("https://localhost/include/dbQuerrySelectConstructorStandings.php");
            await ls.SetItemAsync("ConstructorStandings", sJSON);
        }
        catch
        {
            sJSON = await ls.GetItemAsync<String>("ConstructorStandings");
        }

        JArray jsonArray = JArray.Parse(sJSON.ToString());

        foreach (var jso in jsonArray)
        {
            constructorStandingsList.Add(new ConstructorStanding(Convert.ToInt32(jso["placement"]), Convert.ToInt32(jso["points"]), jso["name"].ToString()));
        }
    }
}