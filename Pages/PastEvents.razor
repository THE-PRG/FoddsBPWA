@page "/PastEvents"
@using Newtonsoft.Json.Linq;
@using Microsoft.AspNetCore.Components.Rendering
@inject HttpClient Http

<h1>Anciens Évenements</h1>

<p>Liste des Anciens Évenements.</p>

@if (pastEventsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col">
            <input list="pastEvents" name="pastEventInput" id="pastEventInput" class="form-control event-input" @onchange="changeTextUpdate">
            <datalist id="pastEvents">
                @foreach (var pastEvent in pastEventsList)
                {
                    <option value="@pastEvent" />
                }
            </datalist>
            <br />
            @if (displayEventName != "")
            { 
                <h5><u>Informations évènements :</u></h5>
                <p>Date évènement : @displayEventDate</p>
                <h5><u>Informations circuit :</u></h5>
                <p>Nom : @displayEventName</p>
                <p>Localisation : @displayEventLocation</p>
                <p>Longueur du circuit : @displayEventCircuitLength</p>
                <p>Tour le plus rapide : @displayEventFastestLap</p>
                <p>Nombre de tours : @displayEventNbLap</p>
                <img src="@displayEventIMG" alt="img-circuit" id="img-circuit" />
            }
        </div>

        @if (displayEventName != "")
        {
            <div class="col">
                <h5><u>Informations classement :</u></h5>
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">POS</th>
                                <th scope="col">N°</th>
                                <th scope="col">Pilote</th>
                                <th scope="col">Equipe</th>
                                <th scope="col">Temps</th>
                                <th scope="col">Points</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var sr in srList)
                            {
                                <tr>
                                    <th scope="row">@sr.placement</th>
                                    <td>@sr.number</td>
                                    <td>@sr.lastN</td>
                                    <td>@sr.team_name</td>
                                    <td>@sr.time</td>
                                    <td>@sr.points</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}

@code {
    private Dictionary<String, Event> pastEventsDic = new Dictionary<String, Event>();
    private List<String> pastEventsList = new List<String>();
    private List<SessionResult> srList = new List<SessionResult>();
    private string displayEventDate = "";
    private string displayEventName = "";
    private string displayEventLocation = "";
    private string displayEventCircuitLength = "";
    private string displayEventFastestLap = "";
    private string displayEventNbLap = "";
    private string displayEventIMG = "";

    protected override async Task OnInitializedAsync()
    {
        string sJSON;

        try
        {
            sJSON = await Http.GetStringAsync("https://localhost/include/dbQuerrySelectPEvents.php");
        }
        catch
        {
            sJSON = "";
        }

        JArray jsonArray = JArray.Parse(sJSON.ToString());

        foreach (var jso in jsonArray)
        {
            pastEventsList.Add(jso["raceW_name"].ToString());

            pastEventsDic.Add(jso["raceW_name"].ToString(), new Event(Convert.ToInt32(jso["circuit_id"]), jso["circuit_name"].ToString(), jso["location"].ToString(),
            Convert.ToDouble(jso["length"]), jso["fastest_lap"].ToString(), jso["img_link"].ToString(), Convert.ToInt32(jso["raceW_id"]),
            jso["raceW_name"].ToString(), Convert.ToInt32(jso["nb_lap"]), Convert.ToInt32(jso["season_id"]), Convert.ToInt32(jso["event_id"]),
            jso["type"].ToString(), jso["date"].ToString()));
        }
    }

    private async Task changeTextUpdate(ChangeEventArgs e)
    {
        if (pastEventsDic.TryGetValue(e.Value.ToString(), out Event output))
        {
            srList.Clear();

            displayEventDate = output.date;
            displayEventName = output.circuit_name;
            displayEventLocation = output.location;
            displayEventCircuitLength = output.length.ToString();
            displayEventFastestLap = output.fastest_lap;
            displayEventNbLap = output.nb_lap.ToString();
            displayEventIMG = output.img_link;

            string sJSON;

            try
            {
                sJSON = await Http.GetStringAsync("https://localhost/include/dbQuerrySelectPEventsResult.php?reid=" + output.event_id);
            }
            catch
            {
                sJSON = "";
            }

            JArray jsonArray = JArray.Parse(sJSON.ToString());

            foreach (var jso in jsonArray)
            {
                srList.Add(new SessionResult(Convert.ToInt32(jso["placement"]), Convert.ToInt32(jso["numb"]), jso["lastN"].ToString(),
                    jso["team_name"].ToString(), jso["time"].ToString(), Convert.ToInt32(jso["points"])));
            }
        }
    }
}